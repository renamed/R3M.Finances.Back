// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApi.Context;

#nullable disable

namespace WebApi.Migrations;

[DbContext(typeof(FinancesContext))]
[Migration("20231226111225_InitialMigration")]
partial class InitialMigration
{
    /// <inheritdoc />
    protected override void BuildTargetModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
        modelBuilder
            .HasAnnotation("ProductVersion", "8.0.0")
            .HasAnnotation("Relational:MaxIdentifierLength", 63);

        NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

        modelBuilder.Entity("WebApi.Model.Category", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<DateTime>("Inserted")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("character varying(100)");

                b.Property<Guid?>("ParentId")
                    .HasColumnType("uuid");

                b.Property<string>("TransactionType")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<DateTime?>("Updated")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.HasIndex("ParentId");

                b.HasIndex("Name", "TransactionType")
                    .IsUnique();

                b.ToTable("Categories");
            });

        modelBuilder.Entity("WebApi.Model.Period", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<DateOnly>("End")
                    .HasColumnType("date");

                b.Property<DateTime>("Inserted")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnType("character varying(10)");

                b.Property<DateOnly>("Start")
                    .HasColumnType("date");

                b.Property<DateTime?>("Updated")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.HasIndex("Name")
                    .IsUnique();

                b.HasIndex("Name", "Start");

                b.ToTable("Periods");
            });

        modelBuilder.Entity("WebApi.Model.Transaction", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<Guid>("CategoryId")
                    .HasColumnType("uuid");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasMaxLength(250)
                    .HasColumnType("character varying(250)");

                b.Property<DateTime>("Inserted")
                    .HasColumnType("timestamp with time zone");

                b.Property<DateOnly>("InvoiceDate")
                    .HasColumnType("date");

                b.Property<decimal?>("InvoiceValue")
                    .HasColumnType("numeric");

                b.Property<Guid>("PeriodId")
                    .HasColumnType("uuid");

                b.Property<DateTime?>("Updated")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.HasIndex("CategoryId");

                b.HasIndex("InvoiceDate")
                    .IsDescending();

                b.HasIndex("PeriodId");

                b.ToTable("Transactions");
            });

        modelBuilder.Entity("WebApi.Model.Category", b =>
            {
                b.HasOne("WebApi.Model.Category", "Parent")
                    .WithMany()
                    .HasForeignKey("ParentId");

                b.Navigation("Parent");
            });

        modelBuilder.Entity("WebApi.Model.Transaction", b =>
            {
                b.HasOne("WebApi.Model.Category", "Category")
                    .WithMany()
                    .HasForeignKey("CategoryId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("WebApi.Model.Period", "Period")
                    .WithMany()
                    .HasForeignKey("PeriodId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Category");

                b.Navigation("Period");
            });
#pragma warning restore 612, 618
    }
}
